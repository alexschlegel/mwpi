function DTI(varargin)
% PercIm.Preprocess.DTI
%
% Description:	preprocess the mwpi dti data
%
% Syntax:	PercIm.Preprocess.DTI(<options>)
%
% In:
% 	<options>:
%		stage:	(<all>)
%		cores:	(12)
%		force:	(false)
%
% Updated: 2015-05-01
% Copyright 2015 Alex Schlegel (schlegel@gmail.com).  This work is licensed
% under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported
% License.
global strDirData;

opt	= ParseArgs(varargin,...
		'stage'	, []	, ...
		'cores'	, 12	, ...
		'force'	, false	  ...
		);

ifo	= PercIm.SubjectInfo;

%get the directories to process
	cPathDTI	= ifo.path.diffusion.raw;
	bProcess	= FileExists(cPathDTI);

	cDirDTI	= cellfun(@PathGetDir,cPathDTI(bProcess),'uni',false);

%process the DTI data
	b	= DTIProcess(cDirDTI,...
			'stage'	, opt.stage	, ...
			'force'	, opt.force	, ...
			'cores'	, opt.cores,  ...
			'f_prompt', false	  ...
			);

%compute MNI FAZ and RDZ data
	%merging threshold for creating the randomise mask (i.e. threshWM==0.75 ==>
	%a voxel must be in 75% of subjects' white matter masks to be included in
	%the analysis
		threshWM	= 0.75;

	%MNI reference volumes
		strRefDTI	= 'FMRIB58_FA_2mm';
		strRefAnat	= 'MNI152_T1_2mm_brain';

		strPathRefDTI	= FSLPathMNIAnatomical('type',strRefDTI);
		strPathRefAnat	= FSLPathMNIAnatomical('type',strRefAnat);

	%FNIRT each subject's FA to the MNI FA
		cPathFA	= cellfun(@(d) PathUnsplit(d,'dti_FA','nii.gz'),cDirDTI,'uni',false);

		[b,cPathFA2MNI,cPathFA2MNIWarp]	= FSLRegisterFNIRT(cPathFA,strPathRefDTI,...
											'betfirst'		, false		, ...
											'tkregfirst'	, true		, ...
											'suffix'		, '2mni'	, ...
											'cores'			, opt.cores	, ...
											'force'			, opt.force	  ...
											);

	%calculate FA Zscore (FAZ)
		[b,cPathFAZ]	= NIfTI.ZScore(cPathFA,...
							'cores'	, opt.cores	, ...
							'force'	, opt.force	  ...
							);

	%calculate RD
		[b,cPathRD]	= FSLRD(cDirDTI,...
						'cores'	, opt.cores	, ...
						'force'	, opt.force	  ...
						);

	%calculate RD Zscore (RDZ)
		[b,cPathRDZ]	= NIfTI.ZScore(cPathRD,...
							'cores'	, opt.cores	, ...
							'force'	, opt.force	  ...
							);

	%transform FAZ to MNI
		[b,cPathFAZ2MNI]	= FSLRegisterFNIRT(cPathFAZ,strPathRefDTI,...
								'suffix'	, '2mni'			, ...
								'warp'		, cPathFA2MNIWarp	, ...
								'cores'		, opt.cores			, ...
								'force'		, opt.force			  ...
								);

	%transform RDZ to MNI
		[b,cPathRDZ2MNI]	= FSLRegisterFNIRT(cPathRDZ,strPathRefDTI,...
								'suffix'	, '2mni'			, ...
								'warp'		, cPathFA2MNIWarp	, ...
								'cores'		, opt.cores			, ...
								'force'		, opt.force			  ...
								);

	%convert freesurfer structural to NIfTI
		cDirStructural		= cellfun(@(d) strrep(d,'/diffusion/','/structural/'),cDirDTI,'uni',false);
		cDirFS				= cellfun(@(d) DirAppend(d,'freesurfer'),cDirStructural,'uni',false);
		cDirFSMRI			= cellfun(@(d) DirAppend(d,'mri'),cDirFS,'UniformOutput',false);
		cPathStructuralMGZ	= cellfun(@(d) PathUnsplit(d,'brain','mgz'),cDirFSMRI,'UniformOutput',false);
		cPathStructural		= cellfun(@(f) PathAddSuffix(f,'','nii.gz'),cPathStructuralMGZ,'UniformOutput',false);

		b	= MRIConvert(cPathStructuralMGZ,cPathStructural,...
				'cores'	, opt.cores	, ...
				'force'	, opt.force	  ...
				);

	%FNIRT hi-res structural to MNI
		[b,cPathStructural2MNI,cPathStructural2MNIWarp]	= FSLRegisterFNIRT(cPathStructural,strPathRefAnat,...
																'suffix'		, '2mni'	, ...
																'betfirst'		, false		, ...
																'tkregfirst'	, true		, ...
																'cores'			, opt.cores	, ...
																'force'			, opt.force	  ...
																);

	%create white matter masks from FreeSurfer's segmentation
		[b,cPathWM]	= FreeSurferMaskWM(cDirFS,...
						'cores'	, opt.cores	, ...
						'force'	, opt.force	  ...
						);

	%transform WM masks to MNI
		[b,cPathWM2MNI]	= FSLRegisterFNIRT(cPathWM,strPathRefAnat	, ...
							'suffix'	, '2mni'					, ...
							'warp'		, cPathStructural2MNIWarp	, ...
							'cores'		, opt.cores					, ...
							'force'		, opt.force					  ...
							);

	%apply the white matter masks to the FAZ and RDZ data
		[b,cPathFAZ2MNIMasked]	= NIfTI.ApplyMask(cPathFAZ2MNI,cPathWM2MNI,...
									'cores'	, opt.cores	, ...
									'force'	, opt.force	  ...
									);
		[b,cPathRDZ2MNIMasked]	= NIfTI.ApplyMask(cPathRDZ2MNI,cPathWM2MNI,...
									'cores'	, opt.cores	, ...
									'force'	, opt.force	  ...
									);

	%stack 4D FAZ and RDZ data
		strDirDTI	= DirAppend(strDirData,'diffusion');

		strPathFAZAll	= PathUnsplit(strDirDTI,'faz','nii.gz');
		strPathRDZAll	= PathUnsplit(strDirDTI,'rdz','nii.gz');

		b	= FSLMerge(cPathFAZ2MNIMasked,strPathFAZAll,'force',opt.force);
		b	= FSLMerge(cPathRDZ2MNIMasked,strPathRDZAll,'force',opt.force);

	%also merge into single session data
		[dummy,kSession]	= find(bProcess);
		kSessionU			= unique(kSession);
		nSession			= numel(kSessionU);

		for kS=1:nSession
			kSCur		= kSessionU(kS);
			bSession	= kSession==kSCur;

			cPathFAZSession	= cPathFAZ2MNIMasked(bSession);
			cPathRDZSession	= cPathRDZ2MNIMasked(bSession);

			strPathFAZSession	= PathAddSuffix(strPathFAZAll,sprintf('_%d',kSCur),'favor','nii.gz');
			strPathRDZSession	= PathAddSuffix(strPathRDZAll,sprintf('_%d',kSCur),'favor','nii.gz');

			b	= FSLMerge(cPathFAZSession,strPathFAZSession,'force',opt.force);
			b	= FSLMerge(cPathRDZSession,strPathRDZSession,'force',opt.force);
		end

	%construct WM mask file for randomise
		strPathWM	= PathUnsplit(strDirDTI,'wm','nii.gz');

		b	= MRIMaskMerge(cPathWM2MNI,strPathWM,...
				'method'	, threshWM	, ...
				'force'		, opt.force	  ...
				);

%compute tracts between the six ROIs
	%***
