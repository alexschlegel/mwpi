function p = Param(varargin)
% MWPI.Param
% 
% Description:	get a mwpi parameter
% 
% Syntax:	p = MWPI.Param(f1,...,fN)
% 
% In:
% 	fK	- the the Kth parameter field
% 
% Out:
% 	p	- the parameter value
%
% Example:
%	p = MWPI.Param('color','back');
%
% Updated: 2015-06-24

% struct to hold param values
persistent P;

if isempty(P)
   P = InitializeP;
end

% get parameter value
p = P;
for k = 1:nargin
    field = varargin{k};
    switch class(field)
        case 'char'
            if isfield(p, field)
                p = p.(field);
            else
                p = [];
                return;
            end
        otherwise
            if iscell(p) % if we're indexing into a cell
                p = p{field};
            else
                p = [];
                return;
            end
    end
end

end

%----------------------------------------------------------------------%

function P = InitializeP
	%--experiment parameters----------------------------------
	P = struct;
    
    P.stim.class		= 1:4;
	
	arrClassComb	 = handshakes(P.stim.class,'ordered',true);
	nClassComb		 = size(arrClassComb, 1);
	P.stim.classComb = mat2cell(arrClassComb, ones(nClassComb,1));
	
	P.trTime = 2; % seconds
	% all remaining times are in trs.
	
	P.exp = struct;
	P.exp.block = struct;
		P.exp.block.prompt = struct;
			P.exp.block.prompt.stim = struct(...
				'tPrompt1',	0.1, ...
				'tBlank1',	0.2, ...
				'tPrompt2',	0.1, ...
				'tBlank2',	0.2	 ...
				);
				P.exp.block.prompt.stim.time = P.exp.block.prompt.stim.tStim1 + ...
											   P.exp.block.prompt.stim.tBlank1 + ...
											   P.exp.block.prompt.stim.tStim2 + ...
											   P.exp.block.prompt.stim.tBlank2;
			
			P.exp.block.prompt.cue = struct(...
				'tCue',			0.1, ...
				'tBlankPost',	0.3  ...
				);
				P.exp.block.prompt.cue.time = P.exp.block.prompt.cue.tCue +...
											  P.exp.block.prompt.cue.tBlankPost;
										  
			P.exp.block.prompt.time = P.exp.block.prompt.stim.time + ...
									  P.exp.block.prompt.cue.time;
		
		P.exp.block.retention = struct(...
			'time',	5		...
			);
		
		P.exp.block.test = struct(...
			'tBlank',	0.25, ...
			'tTest',	0.75  ...
			);
			P.exp.block.test.time = P.exp.block.test.tBlank + ...
									P.exp.block.test.tTest;
			
		P.exp.block.feedback = struct(...
			'tBlank',	0.5,  ...
			'tFeedback',0.5	  ...
			);
			P.exp.block.feedback.time = P.exp.block.feedback.tBlank + ...
										P.exp.block.feedback.tFeedback;
	
	P.exp.block.time = P.exp.block.prompt.time + ...
					   P.exp.block.retention.time + ...
					   P.exp.block.test.time + ...
					   P.exp.block.feedback.time;
	
	P.exp.rest.time = 4;
    
	P.exp.run.nCondRep = 1; % number of times to repeat the 12 class combinations
	P.exp.run.nBlock =	numel(P.stim.classComb) * P.exp.run.nCondRep;
	P.exp.run.time = P.exp.block.time * P.exp.run.nBlock + ...
					 P.exp.rest.time * (P.exp.run.nBlock + 1);
				 
	P.exp.nRun = 12;
	P.exp.nBlock = P.exp.run.nBlock * P.exp.nRun;
				 
	% parameter modifications for the practice run:

	P.practice = struct(...
        'nRun',             1,					  ...
		'run',				struct('nCondRep',5) ...
	);
	P.practice.run.nBlock = numel(P.stim.class) * P.practice.run.nCondRep;
	P.practice.nBlock = P.practice.run.nBlock * P.practice.nRun;
    
    P.reward = struct(...
        'base'  ,   20, ...
        'max'   ,   40, ...
        'penalty',  5   ... penalty is this number times reward
        );
    P.reward.rewardPerBlock = (P.reward.max - P.reward.base) / P.exp.nBlock;
    P.reward.penaltyPerBlock = P.reward.rewardPerBlock * P.reward.penalty;
    
	%--display parameters-------------------------------------
	P.color = struct(...
		'back',     [127 127 127], ...
		'fore',     [0   0   0  ], ...
		'yes',      [0   255 0  ], ...
		'no',       [255 0   0  ] ...
		);
	P.text = struct(...
		'size',     0.75,     ... (d.v.a.)
		'family',   'Arial',...
        'fbOffset',   5,      ...
        'colNorm',  'black',...
        'colYes',   'green',...
        'colNo',    'red',  ...
        'sizeDone', 3.5,    ... (d.v.a.)
        'colDone',  'red'  ...
		);
	P.size = struct(... d.v.a. unless otherwise indicated
		'stim',			6,	 ...
		'growMult',		1.1, ... size multiplier for growing
		'shrinkMult',	0.9  ... size multiplier for shrinking
		);
    
    %--input parameters---------------------------------------
    P.key = struct(...
        'response',		{{'left','right'}}, ...
        'noMatch',		'left',             ...
        'match',		'right',            ...
		'shrink',		'left',				...
		'grow',			'right'				...
        );
end

